#!/usr/bin/env python
from __future__ import division, print_function

import os
import sys
import time
import ConfigParser
import pprint

import h5py
from mst import mdsplus as mds
from mstxray import digitizer

T0 = -0.002
DT = 1 / 60e6

SAVE_DIR = os.path.expanduser('~/mstxray-takedata-data')

if __name__ == '__main__':
    # Create save directory. 
    if not os.path.exists(SAVE_DIR):
        print('Creating save directory:', SAVE_DIR)
        os.mkdir(SAVE_DIR)
    
    # Load config file. 
    print('Parsing configuration file:', sys.argv[1])
    config = ConfigParser.ConfigParser()
    config.read(sys.argv[1])

    # Read in standard configuration. 
    sample_time = config.getint('config', 'sample_time')
    zero_level = config.getint('config', 'zero_level')
    
    print('sample_time:', sample_time)
    print('zero_level:', zero_level)
    
    # Create a card-config dictionary. 
    card_cfg = {}
    
    for section in config.sections():
        # Skip standard configuration section. 
        if section == 'config':
            continue
        
        card = int(section.split('_')[1], 16)
        
        for option in config.options(section):
            channel = int(option.split('_')[1])
            label = config.get(section, option)
            
            if not card in card_cfg:
                card_cfg[card] = {}

            card_cfg[card][channel] = label
            
    print('Card configuration:')
    pprint.pprint(card_cfg)

    digi = digitizer.get_client()
    
    # Zero digitizer. 
    print('Zeroing digitizer...')
    digi.zero(value=zero_level)

    # Enter shot loop. 
    while 1:
        print('Arming digitizer...')
        digi.arm(int((sample_time + 2) * 1e-3 * 60e6))

        # Wait for the next shot.
        shot = mds.current_shot()

        while 1:
            print('Waiting for shot (currently: {0})...'.format(shot))
            current_shot = mds.current_shot()

            if current_shot != shot:
                shot = current_shot
                break

            time.sleep(5)

        # Save data. 
        save_path = os.path.join(SAVE_DIR, str(shot) + '.hdf5')
        
        if os.path.exists(save_path):
            raise Exception('Attempted to overwrite data:', save_path)

        f = h5py.File(save_path, 'w')
        f.create_dataset('t0', data=T0)
        f.create_dataset('dt', data=DT)
        
        for card in card_cfg:
            print('Reading data for card:', hex(card))
            group = f.create_group('card_' + hex(card))
            for channel in card_cfg[card]:
                print('Reading channel:', channel)
                subgroup = group.create_group('channel_' + str(channel))
                label = card_cfg[card][channel]
                subgroup.create_dataset('label', data=label)
                subgroup.create_dataset('data', 
                                        data=digi.get_data(card, channel - 1),
                                        compression=1)
                
        f.close()
            
